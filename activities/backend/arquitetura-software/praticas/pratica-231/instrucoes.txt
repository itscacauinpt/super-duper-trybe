Vamos praticar #1
Vamos colocar em pr√°tica tudo o que aprendemos at√© aqui. Primeiro, crie a tabela Books usando o SQL abaixo
Copiar
USE model_example;

CREATE TABLE books (
	id INT NOT NULL AUTO_INCREMENT,
	title VARCHAR(90) NOT NULL,
	author_id INT(11) NOT NULL,
	PRIMARY KEY(id),
	FOREIGN KEY (author_id) REFERENCES authors (id)
);

INSERT INTO books (title, author_id)
VALUES
	('A Game of Thrones', 1),
	('A Clash of Kings', 1),
	('A Storm of Swords', 1),
	('The Lord of The Rings - The Fellowship of the Ring', 2),
	('The Lord of The Rings - The Two Towers', 2),
	('The Lord of The Rings - The Return of The King', 2),
	('Foundation', 3);
Depois de criar a tabela no banco de dados, fa√ßa as seguintes implementa√ß√µes.

Crie um modelo Book e defina o m√©todo getAll para retornar a lista de todos os livros;
Crie uma rota /books para trazer a lista de todos os livros;
Crie um m√©todo getByAuthorId no modelo Book, para retornar apenas livros associados com um determinado author_id. Altere o middleware da rota books criado no passo 2 para receber uma query string com a chave author_id, e retornar apenas os livros associados.

//

Pr√°tica #3
üöÄ Se liga nesse foguete!
Os exerc√≠cios destacados com üöÄ s√£o os fundamentais pra voc√™ ir bem no projeto! Todos os exerc√≠cios v√£o contribuir com sua forma√ß√£o mas fique de olho nesses! üëÄ
üöÄ Ainda usando a tabela books como refer√™ncia crie uma rota books do tipo POST. Fa√ßa as seguintes valida√ß√µes:
T√≠tulo n√£o pode ser vazio;
T√≠tulo precisa ter pelo menos tr√™s caracteres;
O campo author_id n√£o pode ser vazio;
O campo author_id s√≥ √© v√°lido se existir uma pessoa autora com esse id;
Se algum dos requisitos anteriores n√£o for atendido, retornar um json no formato abaixo, com status 400.
{
	message: 'Dados inv√°lidos'
}

Caso contr√°rio, insira o livro na tabela books e retorne o json no formato abaixo, com o status 201.
{
	message: 'Livro criado com sucesso!'
}
