1️⃣ Instalação do Sequelize
npm install sequelize

2️⃣ Inicialização do Sequelize
npm install sequelize-cli *responsável por gerar e executar as operações

npm install mysql2 *dependência necessária para usarmos o MySQL juntamente com o Sequelize.

npx sequelize-cli init * iniciar um projeto com o Sequelize
(Sequelize CLI [Node: 16.15.1, CLI: 6.4.1, ORM: 6.21.4]

3️⃣ Conexão com o banco de dados
Created "config/config.json"
Successfully created models folder at "/".
Successfully created migrations folder at "/".
Successfully created seeders folder at "/".)

 configurar o arquivo config.json, configurando o acesso da aplicação ao nosso banco de dados.
*    "username": "root",
    "password": "",
    "database": "orm_example",
    "host": "127.0.0.1",
    "dialect": "mysql"*
**Importante: vale lembrar que passar as credenciais dessa forma não é uma boa prática, pois nossos dados de acesso ao banco de dados ficam totalmente visíveis para qualquer pessoa que tenha acesso ao código da nossa aplicação.

4️⃣ Criação do banco de dados usando o CLI do Sequelize
npx sequelize db:create **criar o banco de dados orm_example (que nomeamos no arquivo config.json)

// models

➡️ Para criar um model, usamos o seguinte comando no CLI:
npx sequelize model:generate --name NomeDoModel --attributes nomeDoAtributo:string
(O parâmetro --name se refere ao nome da tabela, no singular, pois está relacionado a uma unidade dos dados, como uma linha no banco de dados ou um objeto no seu código JavaScript;
O parâmetro --attributes se refere ao nome das colunas e os tipos de dados que elas contêm. Não é preciso definir todas as colunas neste comando, é possível adicioná-las direto no arquivo model.js gerado e na migration equivalente a este model.)

npx sequelize model:generate --name User --attributes fullName:string


// migration *Uma migration é uma forma de versionar o schema do banco de dados. 

npx sequelize db:migrate
npx sequelize db:migrate:undo

-> Criando uma nova migration para alterar uma tabela já existente**
Para isso, o objeto queryInterface possui funções específicas, que permitem criar uma nova coluna, remover uma coluna ou mesmo mudar o tipo de uma coluna que já existe. Nesse caso, o queryInterface abstrai o que a função ALTER TABLE faz no SQL, como já aprendemos no conteúdo sobre estrutura de banco de dados.
npx sequelize migration:generate --name add-column-phone-table-users

